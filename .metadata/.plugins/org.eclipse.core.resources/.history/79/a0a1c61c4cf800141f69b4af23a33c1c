package handsfree;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

public class ControllerThread extends Thread {
    private HeadGestureThread headListener;
    private SpeechThread speechListener;
    private Robot robot;
    private int zoomed;
    private boolean active;
    private boolean headMode;
    private ArrayList<Integer> bookmarks;
    private long lastHeadModeUpdate = 0;
    private double headModeCenter = 0.0;
    private boolean recentUp;

    public ControllerThread() {
        try {
            this.robot = new Robot();
        } catch (AWTException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        this.zoomed = 0;
        this.active = true;
        this.headMode = false;
        this.bookmarks = new ArrayList<Integer>();
        this.recentUp = false;
    }

    private void goDown() {
        for (int i = 0; i < 40; i++) {
            this.robot.keyPress(KeyEvent.VK_DOWN);
            this.robot.keyRelease(KeyEvent.VK_DOWN);
            recentUp = false;
        }
    }

    private void goUp() {
        for (int i = 0; i < 40; i++) {
            this.robot.keyPress(KeyEvent.VK_UP);
            this.robot.keyRelease(KeyEvent.VK_UP);
            recentUp = true;
        }
    }

    private void zoomIn() {
        if (this.zoomed != -1) { // not zoomed out
            this.robot.keyPress(KeyEvent.VK_CONTROL);
            this.robot.keyPress(KeyEvent.VK_EQUALS);
            this.robot.keyRelease(KeyEvent.VK_CONTROL);
            this.robot.keyRelease(KeyEvent.VK_EQUALS);
            this.zoomed = 1;
        } else { // is zoomed out
            this.robot.keyPress(KeyEvent.VK_CONTROL);
            this.robot.keyPress(KeyEvent.VK_0);
            this.robot.keyRelease(KeyEvent.VK_CONTROL);
            this.robot.keyRelease(KeyEvent.VK_0);
            this.zoomed = 0;
        }
    }

    private void zoomOut() {
        if (this.zoomed != 1) { // not zoomed in
            this.robot.keyPress(KeyEvent.VK_CONTROL);
            this.robot.keyPress(KeyEvent.VK_MINUS);
            this.robot.keyRelease(KeyEvent.VK_CONTROL);
            this.robot.keyRelease(KeyEvent.VK_MINUS);
            this.zoomed = -1;
        } else { // is zoomed out
            this.robot.keyPress(KeyEvent.VK_CONTROL);
            this.robot.keyPress(KeyEvent.VK_0);
            this.robot.keyRelease(KeyEvent.VK_CONTROL);
            this.robot.keyRelease(KeyEvent.VK_0);
            this.zoomed = 0;
        }
    }

    private void firstPage() {
        this.robot.keyPress(KeyEvent.VK_HOME);
        this.robot.keyPress(KeyEvent.VK_HOME);
    }

    private void lastPage() {
        this.robot.keyPress(KeyEvent.VK_END);
        this.robot.keyPress(KeyEvent.VK_END);

    }

    private void makeNote() {
        this.robot.keyPress(KeyEvent.VK_CONTROL);
        this.robot.keyPress(KeyEvent.VK_6);
        this.robot.keyRelease(KeyEvent.VK_CONTROL);
        this.robot.keyRelease(KeyEvent.VK_6);
    }

    private void finishNote() {
        this.robot.keyPress(KeyEvent.VK_ESCAPE);
        this.robot.keyRelease(KeyEvent.VK_ESCAPE);
    }

    private void goToPage(String nums) {
        this.robot.keyPress(KeyEvent.VK_CONTROL);
        this.robot.keyPress(KeyEvent.VK_SHIFT);
        this.robot.keyPress(KeyEvent.VK_N);
        this.robot.keyRelease(KeyEvent.VK_CONTROL);
        this.robot.keyRelease(KeyEvent.VK_SHIFT);
        this.robot.keyRelease(KeyEvent.VK_N);
        for (String num : nums.split(" ")) {
            int e = numToEvent(strToNum(num));
            this.robot.keyPress(e);
            this.robot.keyRelease(e);
        }
        this.robot.keyPress(KeyEvent.VK_ENTER);
        this.robot.keyRelease(KeyEvent.VK_ENTER);
    }

    private void makeBookmarkHere() {
        int bmNum = this.bookmarks.size();
        this.robot.keyPress(KeyEvent.VK_CONTROL);
        this.robot.keyPress(KeyEvent.VK_SHIFT);
        this.robot.keyPress(KeyEvent.VK_N);
        this.robot.keyRelease(KeyEvent.VK_CONTROL);
        this.robot.keyRelease(KeyEvent.VK_SHIFT);
        this.robot.keyRelease(KeyEvent.VK_N);
        this.robot.keyPress(KeyEvent.VK_CONTROL);
        this.robot.keyPress(KeyEvent.VK_C);
        this.robot.keyRelease(KeyEvent.VK_CONTROL);
        this.robot.keyRelease(KeyEvent.VK_C);
        this.robot.keyPress(KeyEvent.VK_ESCAPE);
        this.robot.keyRelease(KeyEvent.VK_ESCAPE);
        try {
            Thread.sleep(100);
        } catch (InterruptedException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        String result = "";
        try {
            result = (String) clipboard.getData(DataFlavor.stringFlavor);
        } catch (UnsupportedFlavorException | IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println("String from Clipboard:" + result);
        int pgNum = Integer.parseInt(result);
        HandsFree.callOutput = "Make bookmark " + bmNum + " on page " + pgNum;
        System.out.println(HandsFree.callOutput);
        bookmarks.add(pgNum);
    }

    private void goToBookmark(String nums) {
        System.out.println(nums);
        int bmNum = 0;
        for (String num : nums.split(" ")) {
            bmNum = bmNum * 10 + strToNum(num);
        }
        if (bmNum >= bookmarks.size()) {
            return;
        }
        System.out.println(bookmarks.get(bmNum));
        String pgNum = "" + bookmarks.get(bmNum);
        String x = numToStr(Integer.parseInt(pgNum.substring(0, 1)));
        for (int i = 1; i < pgNum.length(); i++) {
            x += " " + numToStr(Integer.parseInt(pgNum.substring(i, i + 1)));
        }
        System.out.println(x);
        goToPage(x);
    }

    private void onHeadMode() {
        if (!headListener.hasData()) {
            return;
        }
        double pitch = headListener.lastData()[4];
        if (Math.abs(pitch) < 8) {
            return;
        }
        double t = Math.pow(((90 - Math.abs(pitch)) / 90.0), 6) * 120 * 60;
        if (System.currentTimeMillis() - this.lastHeadModeUpdate > t) {
            if (pitch < 0) {
                this.robot.keyPress(KeyEvent.VK_DOWN);
                this.robot.keyRelease(KeyEvent.VK_DOWN);
                recentUp = false;
            } else {
                this.robot.keyPress(KeyEvent.VK_UP);
                this.robot.keyRelease(KeyEvent.VK_UP);
                recentUp = true;
            }
            this.lastHeadModeUpdate = System.currentTimeMillis();
        }
    }

    private void aLittleMore() {
        for (int i = 0; i < 5; i++) {
            if (recentUp) {
                this.robot.keyPress(KeyEvent.VK_UP);
                this.robot.keyRelease(KeyEvent.VK_UP);
            } else {
                this.robot.keyPress(KeyEvent.VK_DOWN);
                this.robot.keyRelease(KeyEvent.VK_DOWN);
            }
        }
    }

    private String numToStr(int num) {
        String[] s = { "zero", "one", "two", "three", "four", "five", "six",
                "seven", "eight", "nine" };
        return s[num];
    }

    private int strToNum(String num) {
        int e = 0;
        if (num.equals("one")) {
            e = 1;
        } else if (num.equals("two")) {
            e = 2;
        } else if (num.equals("three")) {
            e = 3;
        } else if (num.equals("four")) {
            e = 4;
        } else if (num.equals("five")) {
            e = 5;
        } else if (num.equals("six")) {
            e = 6;
        } else if (num.equals("seven")) {
            e = 7;
        } else if (num.equals("eight")) {
            e = 8;
        } else if (num.equals("nine")) {
            e = 9;
        } else if (num.equals("zero")) {
            e = 0;
        }
        return e;
    }

    private int numToEvent(int n) {
        int[] e = { KeyEvent.VK_0, KeyEvent.VK_1, KeyEvent.VK_2, KeyEvent.VK_3,
                KeyEvent.VK_4, KeyEvent.VK_5, KeyEvent.VK_6, KeyEvent.VK_7,
                KeyEvent.VK_8, KeyEvent.VK_9 };
        return e[n];
    }

    private void onHeadGesture(HeadGesture headGesture) {
        System.out.println("Head gesture: " + headGesture.name());
        switch (headGesture) {
        case NOD_DOWN:
            goDown();
            break;
        case NOD_UP:
            goUp();
            break;
        case NONE:
            break;
        case ZOOM_IN:
            zoomOut();
            break;
        case ZOOM_OUT:
            zoomIn();
            break;
        }
    }

    private void onSpeech(String speech) {
        System.out.println(speech);
        if (speech.contains("up")) {
            goUp();
        } else if (speech.contains("down")) {
            goDown();
        } else if (speech.contains("zoom")) {
            if (speech.contains("out")) {
                zoomOut();
            } else {
                zoomIn();
            }
        } else if (speech.contains("first page")) {
            firstPage();
        } else if (speech.contains("last page")) {
            lastPage();
        } else if (speech.contains("make note")) {
            makeNote();
        } else if (speech.contains("finish note")) {
            finishNote();
        } else if (speech.contains("go to page")) {
            if (speech.length() > 11) {
                goToPage(speech.substring(11));
            }
        } else if (speech.contains("make bookmark here")) {
            makeBookmarkHere();
        } else if (speech.contains("go to bookmark")) {
            if (speech.length() > 15) {
                goToBookmark(speech.substring(15));
            }
        } else if (speech.contains("head mode")) {
            if (speech.contains("activate")) {
                headMode = true;
                HandsFree.callOutput = "Head mode activate";
                if (headListener.hasData()) {
                    headModeCenter = headListener.lastData()[4];
                } else {
                    headModeCenter = 0.0;
                }
            } else if (speech.contains("stop")) {
                headMode = false;
                HandsFree.callOutput = "Head mode stop";
            }
        } else if (speech.contains("a little more")) {
            aLittleMore();
        }
    }

    public void run() {
        this.headListener = new HeadGestureThread();
        if (HandsFree.HEAD_ENABLED) {
            this.headListener.start();
        }
        this.speechListener = new SpeechThread();
        if (HandsFree.SPEECH_ENABLED) {
            this.speechListener.start();
        }
        while (true) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String speech = this.speechListener.getSpeech();
            HeadGesture headGesture = this.headListener.getGesture();
            if (this.active) {
                if ("hands free stop".equals(speech)) {
                    this.active = false;
                    HandsFree.callActive = "" + (this.active);
                } else {
                    if (!"".equals(speech)) {
                        HandsFree.callSpeech = (speech);
                        onSpeech(speech);
                    }
                    if (!headMode && headGesture != null
                            && headGesture != HeadGesture.NONE) {
                        HandsFree.callGesture = headGesture.name();
                        onHeadGesture(headGesture);
                    } else if (headMode) {
                        onHeadMode();
                    }
                }
            } else {
                if ("hands free activate".equals(speech)) {
                    this.active = true;
                    HandsFree.callActive = "" + (this.active);
                }
            }
        }
    }

}
